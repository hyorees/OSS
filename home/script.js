// ÎÇ†Ïßú, Í∏∞Î∂Ñ, Î©îÎ™®, Ìï†Ïùº Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•Ïö©
let selectedDate = new Date();
let moods = JSON.parse(localStorage.getItem('moods') || '{}');
let memos = JSON.parse(localStorage.getItem('memos') || '{}');
let todos = JSON.parse(localStorage.getItem('todos') || '{}');

//Ï∂îÍ∞Ä 
let categoryTodos = {
    work: [],
    personal: [],
    study: [],
    shopping: []
};
//

function formatDate(date) {
    return date.toISOString().slice(0, 10);
}

function renderCalendar() {
    const year = selectedDate.getFullYear();
    const month = selectedDate.getMonth();
    document.getElementById('monthYear').textContent = `${year}ÎÖÑ ${month + 1}Ïõî`;

    const firstDay = new Date(year, month, 1).getDay();
    const lastDate = new Date(year, month + 1, 0).getDate();

    let html = '';
    let day = 1 - firstDay;
    for (let i = 0; i < 6; i++) {
        html += '<tr>';
        for (let j = 0; j < 7; j++, day++) {
            if (day < 1 || day > lastDate) {
                html += '<td></td>';
            } else {
                const dateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
                let classes = [];
                if (formatDate(selectedDate) === dateStr) classes.push('selected');
                if (moods[dateStr]) classes.push('has-mood');
                html += `<td class="${classes.join(' ')}" data-date="${dateStr}">${day}`;
                if(moods[dateStr]){
                    html += `<span class="mood-icon">${getMoodIcon(moods[dateStr])}</span>`;
                }
                html += `</td>`;
            }
        }
        html += '</tr>';
    }
    document.getElementById('calendarBody').innerHTML = html;

    // ÎÇ†Ïßú ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
    document.querySelectorAll('.calendar td[data-date]').forEach(td => {
        td.onclick = () => {
            selectedDate = new Date(td.dataset.date);
            renderCalendar();
            renderMood();
            renderMemo();
            renderTodos();
        };
    });
}

function getMoodIcon(mood){
    switch(mood){
        case 'happy':
            return 'üòä';
        case 'sad':
            return 'üò¢';
        case 'angry':
            return 'üò†';
        case 'neutral':
            return 'üòê';
        case 'tired':
            return 'ü•±';
        case 'smile':
            return 'üòÅ';
        default:
            return '';
    }
}

function renderMood() {
    const dateStr = formatDate(selectedDate);
    document.querySelectorAll('.mood-select span').forEach(span => {
        span.classList.toggle('selected', moods[dateStr] === span.dataset.mood);
        span.onclick = () => {
            if (moods[dateStr] === span.dataset.mood){
                delete moods[dateStr];
            } else{
                moods[dateStr] = span.dataset.mood;
            }
            localStorage.setItem('moods', JSON.stringify(moods));
            renderCalendar();
            renderMood();
        };
    });
}

function renderMemo() {
    const dateStr = formatDate(selectedDate);
    document.getElementById('memo').value = memos[dateStr] || '';
}

function renderTodos() {
    const dateStr = formatDate(selectedDate);
    const list = todos[dateStr] || [];
    const ul = document.getElementById('todoList');
    ul.innerHTML = '';
    list.forEach((item, idx) => {
        const li = document.createElement('li');
        if (item.done) li.classList.add('completed');
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.checked = item.done;
        checkbox.onchange = () => {
            item.done = checkbox.checked;
            localStorage.setItem('todos', JSON.stringify(todos));
            renderTodos();
        };
        const span = document.createElement('span');
        span.textContent = item.text;

        const categorySpan = document.createElement('span');
        categorySpan.textContent = item.category ? `(${item.category})` : '';
        categorySpan.style.fontSize = '0.8em';
        categorySpan.style.color = '#888';
        span.appendChild(categorySpan);

        const editBtn = document.createElement('button');
        editBtn.textContent = '‚úèÔ∏è';
        editBtn.onclick = () => {
            const input = document.createElement('input');
            input.type = 'text';
            input.value = item.text;
            input.style.flex = '1';
            input.onkeydown = (e) => {
                if (e.key === 'Enter') {
                    item.text = input.value;
                    localStorage.setItem('todos', JSON.stringify(todos));
                    renderTodos();
                }
            };
            li.replaceChild(input, span);
            input.focus();
        };

    
        const delBtn = document.createElement('button');
        delBtn.textContent = 'üóëÔ∏è';
        delBtn.onclick = () => {
            list.splice(idx, 1);
            todos[dateStr] = list;
            localStorage.setItem('todos', JSON.stringify(todos));
            renderTodos();
        };
        li.appendChild(checkbox);
        li.appendChild(span);
        li.appendChild(editBtn); 
        li.appendChild(delBtn);
        ul.appendChild(li);
    });
}

document.getElementById('prevMonth').onclick = () => {
    selectedDate.setMonth(selectedDate.getMonth() - 1);
    renderCalendar();
    renderMood();
    renderMemo();
    renderTodos();
};
document.getElementById('nextMonth').onclick = () => {
    selectedDate.setMonth(selectedDate.getMonth() + 1);
    renderCalendar();
    renderMood();
    renderMemo();
    renderTodos();
};
document.getElementById('saveMemo').onclick = () => {
    const dateStr = formatDate(selectedDate);
    memos[dateStr] = document.getElementById('memo').value;
    localStorage.setItem('memos', JSON.stringify(memos));
    alert('Î©îÎ™®Í∞Ä Ï†ÄÏû•ÎêòÏóàÏäµÎãàÎã§!');
};
document.getElementById('addTodo').onclick = () => {
    const dateStr = formatDate(selectedDate);
    const input = document.getElementById('todoInput');
    const category = document.getElementById('categorySelect').value;
    
    if (!input.value.trim()) return;
    if (!todos[dateStr]) todos[dateStr] = [];
     todos[dateStr].push({ 
        text: `${input.value} (${category})`, // Ïπ¥ÌÖåÍ≥†Î¶¨ ÌÖçÏä§Ìä∏Î•º Í¥ÑÌò∏ ÏïàÏóê Ï∂îÍ∞Ä
        done: false,
        category: category  // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï∂îÍ∞Ä
    });
    localStorage.setItem('todos', JSON.stringify(todos));
    input.value = '';
    renderTodos();
};

document.getElementById('todoInput').addEventListener('keydown', function (e) {
    if (e.key === 'Enter') {
        document.getElementById('addTodo').click();
    }
});

document.getElementById('categorySelect').addEventListener('change', function () {
    const selectedCategory = this.value;
    const todoInput = document.getElementById('todoInput');
    const newCategoryDiv = document.getElementById('newCategoryDiv');

    if (selectedCategory === 'new') {
        // ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨ ÏûÖÎ†• Ï∞Ω ÌëúÏãú
        newCategoryDiv.style.display = 'block';
        todoInput.style.display = 'none';  // ÏûÖÎ†•Ï∞ΩÏùÄ Ïà®ÍπÄ
    } else {
        // Í∏∞Ï°¥ Ïπ¥ÌÖåÍ≥†Î¶¨ ÏÑ†ÌÉù Ïãú
        newCategoryDiv.style.display = 'none';
        todoInput.style.display = selectedCategory ? 'block' : 'none';
    }
});
document.getElementById('addNewCategoryButton').addEventListener('click', function () {
    const newCategoryName = document.getElementById('newCategoryInput').value.trim();

    if (!newCategoryName) return alert('Ïπ¥ÌÖåÍ≥†Î¶¨ Ïù¥Î¶ÑÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî!');
    if (categoryTodos[newCategoryName]) return alert('Ïù¥ÎØ∏ Ï°¥Ïû¨ÌïòÎäî Ïπ¥ÌÖåÍ≥†Î¶¨ÏûÖÎãàÎã§.');

    // Ïπ¥ÌÖåÍ≥†Î¶¨ Í∞ùÏ≤¥Ïóê Ï∂îÍ∞Ä
    categoryTodos[newCategoryName] = [];

    // localStorageÏóê Ï†ÄÏû•
    localStorage.setItem('categoryTodos', JSON.stringify(categoryTodos));

    // selectÏóê ÏÉà ÏòµÏÖò Ï∂îÍ∞Ä
    const categorySelect = document.getElementById('categorySelect');
    const newOption = document.createElement('option');
    newOption.value = newCategoryName;
    newOption.textContent = newCategoryName;
    categorySelect.appendChild(newOption);

    // ÏÉàÎ°ú ÎßåÎì† Ïπ¥ÌÖåÍ≥†Î¶¨Î•º ÏûêÎèô ÏÑ†ÌÉù
    categorySelect.value = newCategoryName;

    // UI Î¶¨ÏÖã
    document.getElementById('newCategoryInput').value = '';
    document.getElementById('newCategoryDiv').style.display = 'none';
    document.getElementById('todoInput').style.display = 'block';

    // Ìï†Ïùº ÏòÅÏó≠ Î¶¨Î†åÎçîÎßÅ
    renderCategoryTodo();
})

document.getElementById('addTodo').onclick = () => {
    const dateStr = formatDate(selectedDate);
    const input = document.getElementById('todoInput');
    const category = document.getElementById('categorySelect').value;
    const selectedCategory = categorySelect.options[categorySelect.selectedIndex].textContent;

    if (!input.value.trim()) return;

    // Í∏∞Î≥∏ Ìï† Ïùº Î™©Î°ù Ï∂îÍ∞Ä
    if (!todos[dateStr]) todos[dateStr] = [];
    todos[dateStr].push({ 
        text: `${input.value} (${selectedCategory})`, 
        done: false 
    });

    // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ìï† Ïùº Ï∂îÍ∞Ä
    if (category && !categoryTodos[category]) {
        categoryTodos[category] = [];
    }

    if (category) {
        categoryTodos[category].push(input.value);  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ìï†Ïùº Î™©Î°ùÏóê Ï∂îÍ∞Ä
    }

    localStorage.setItem('todos', JSON.stringify(todos));  // Ìï† Ïùº Ï†ÄÏû•
    localStorage.setItem('categoryTodos', JSON.stringify(categoryTodos));  // Ïπ¥ÌÖåÍ≥†Î¶¨Î≥Ñ Ìï† Ïùº Ï†ÄÏû•

    input.value = '';
    renderTodos();
    renderCategoryTodo();
};
function renderCategoryTodo() {
    const container = document.getElementById('categoryTodoContainer');
    container.innerHTML = '';  // Í∏∞Ï°¥ ÎÇ¥Ïö© ÎπÑÏö∞Í∏∞

    Object.keys(categoryTodos).forEach(category => {
        const categoryTodoDiv = document.createElement('div');
        categoryTodoDiv.classList.add('category-todo');

        // Ïπ¥ÌÖåÍ≥†Î¶¨ Ï†úÎ™©
        const categoryTitle = document.createElement('h3');
        categoryTitle.textContent = `${category} Ìï†Ïùº`;
        categoryTodoDiv.appendChild(categoryTitle);

        // Ìï†Ïùº ÏûÖÎ†•Ï∞Ω
        const inputField = document.createElement('input');
        inputField.type = 'text';
        inputField.placeholder = 'Ìï† ÏùºÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî';
        categoryTodoDiv.appendChild(inputField);

        // Ìï†Ïùº Ï∂îÍ∞Ä Î≤ÑÌäº
        const addButton = document.createElement('button');
        addButton.textContent = 'Ìï†Ïùº Ï∂îÍ∞Ä';
        addButton.onclick = () => addTodoToCategory(category, inputField.value);  // Ìï†Ïùº Ï∂îÍ∞Ä Ìï®Ïàò Ìò∏Ï∂ú
        categoryTodoDiv.appendChild(addButton);

        // Ìï†Ïùº Î™©Î°ù
        const todoList = document.createElement('ul');
        categoryTodos[category].forEach(todo => {
            const todoItem = document.createElement('li');
            todoItem.textContent = todo;
            todoList.appendChild(todoItem);
        });
        categoryTodoDiv.appendChild(todoList);

        container.appendChild(categoryTodoDiv);
    });
}
function addTodoToCategory(category, todoText) {
    if (todoText.trim() === '') return;  // ÏûÖÎ†•Ïù¥ ÏóÜÏúºÎ©¥ Ï∂îÍ∞ÄÌïòÏßÄ ÏïäÏùå
    categoryTodos[category].push(todoText);
    localStorage.setItem('categoryTodos', JSON.stringify(categoryTodos));
    
    //categoryTodos[category].push(todoText);  // ÏÑ†ÌÉùÎêú Ïπ¥ÌÖåÍ≥†Î¶¨Ïùò Ìï†Ïùº Î™©Î°ùÏóê Ï∂îÍ∞Ä
    //renderCategoryTodo(category); 
    //localStorage.setItem('categoryTodos', JSON.stringify(categoryTodos));
}
function renderCategorySelect() {
    const categorySelect = document.getElementById('categorySelect');
    categorySelect.innerHTML = `
        <option value="">Í∏∞Î≥∏</option>
        <option value="new">ÏÉà Ïπ¥ÌÖåÍ≥†Î¶¨ ÎßåÎì§Í∏∞</option>
    `;

    Object.keys(categoryTodos).forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
    });
}
window.onload = () => {
    renderCalendar();
    renderMood();
    renderMemo();
    renderTodos();
    const todoInput = document.getElementById('todoInput');
    todoInput.style.display = 'none';  

    renderCategoryTodo();
}; 

